filter(data_disease_severity == TRUE)
)
datatable(
table_5 %>%
filter(data_on_deaths == TRUE)
)
search_details <- search_details %>%
clean_data() %>%
rename(date_screened = date_screening_in_format_2020_05_22) %>%
write_rds(here::here('data_clean', 'search_details.rds')) ## The title of the date screened column is to communicate among the review team how we need date formatted
protect_columns_1 <- names(data_study_general) %in% 'doi' ## As the DoI's are links we want to preserve their formatting when running the cleaning script
data_study_general <- data_study_general %>%
rename('notes' = 11, date_published = `date_published_format(2020-05-12)`) %>%
clean_data(protect = protect_columns_1) %>%
mutate(study_id = 1:length(lead_author)) %>% ## We create a unique study ID to aid checking of the outputs later
write_rds(here::here('data_clean', 'data_study_general.rds'))
review_details <- data_study_general %>%
select(lead_author, date_published, country, review_version, study_id) %>% ## The version of the review in which included studies were incorporated is noted
write_rds(here::here('data_clean', 'review_details.rds'))
table_1 <- table_1 %>%
clean_data() %>%
mutate(., lower_range = sub('\\_.*', '', .$range)) %>%
mutate(., upper_range = sub('.*_', '',.$range,)) %>% ## We break apart the age range into an upper and lower level
select(lead_author, sample_size, female_sex_percent, data_source, median_age, mean_age, iqr_lower, iqr_upper, standard_deviation, lower_range,
upper_range, current_smoker, former_smoker, current_former_smoker, never_smoker, never_smoker_unknown, current_vaper, former_vaper,
current_former_vaper, not_stated, missing, total) %>%
filter(!is.na(lead_author)) %>%
left_join(., review_details, by = 'lead_author') %>%
write_rds(here::here('data_clean', 'table_1.rds'))
##For the following tables we're only interested in obtaining data for trials which report on the specific outcome of interest
table_2 <-  table_2 %>%
clean_data() %>%
filter(data_on_testing == TRUE) %>%
left_join(., review_details, by = 'lead_author') %>%
write_rds(here::here('data_clean', 'table_2.rds'))
table_3 <-  table_3 %>%
clean_data() %>%
filter(data_on_hospitalisation == TRUE) %>%
left_join(., review_details, by = 'lead_author') %>%
write_rds(here::here('data_clean', 'table_3.rds'))
table_4 <-  table_4 %>%
clean_data() %>%
filter(data_disease_severity == TRUE) %>%
left_join(., review_details, by = 'lead_author') %>%
write_rds(here::here('data_clean', 'table_4.rds'))
table_5 <- table_5 %>%
clean_data() %>%
filter(data_on_deaths == TRUE) %>%
left_join(., review_details, by = 'lead_author') %>%
write_rds(here::here('data_clean', 'table_5.rds'))
protect_columns_2 <- !names(table_6) %in% 'lead_author'
table_6 <-  table_6 %>%
clean_data(protect = protect_columns_2) %>%
left_join(., table_1 %>%
select(lead_author,
not_stated,
missing,
total),
by = 'lead_author') %>%
mutate(missingness = rowSums(.[8:9], na.rm = T),
missingness_percentage = (missingness/total)*100) %>% ## Later we want to assess the amount of missingness for each study as it would impact the inclusion of a study into the relevant meta-analyses
select(-c(not_stated, missing, total, missingness)) %>%
write_rds(here::here('data_clean', 'table_6.rds'))
a <- data_study_general %>%
select(lead_author, date_published, source, study_id) %>%
rename('Lead Author' = lead_author,
'Date Published' = date_published,
'Publication Source' = source,
'Study ID' = study_id)
a$`Lead Author` <- to_upper_camel_case(a$`Lead Author`, sep_out = ", ")
a$`Publication Source` <- to_title_case(a$`Publication Source`)
a$`Publication Source` <- if_else(str_length(a$`Publication Source`) < 5,
toupper(a$`Publication Source`),
to_title_case(a$`Publication Source`))
datatable(a)
a <- flextable(a)%>%
set_caption(a, caption = 'All studies included in data extraction') %>%
set_table_properties(width = 1, layout = 'autofit')
save_as_docx(a, path = here('data_clean', 'all_studies.docx'))
date_of_update <- Sys.Date()
prev_versions <- c('v1', 'v2', 'v3', 'v4')
#This can categorise which studies we want to look at
current_version <- c('v5')
#This will categorise which studies we are including in the current report
analysed_versions <- c('v1', 'v2', 'v3', 'v4', 'v5')
#This will incorporate all studies into the current version of the report
exclude_from_analysis <- c('isaric_1', 'isaric_2', 'isaric_3', 'miyara_old', 'isaric_4', 'mehra', 'hopkinson', 'gaibazzi', 'miyara_updated', 'russell')
data_study_general <- data_study_general %>%
filter(review_version %in% analysed_versions) %>%
filter(!(lead_author %in% exclude_from_analysis)) %>%
write_csv(., here::here('data_clean', 'data_study_general.csv'))
table_1 <- table_1 %>%
filter(review_version %in% analysed_versions) %>%
select(-review_version) %>%
filter(!(lead_author %in% exclude_from_analysis))
table_2 <- table_2 %>%
filter(review_version %in% analysed_versions) %>%
select(-review_version) %>%
filter(!(lead_author %in% exclude_from_analysis))
table_3 <- table_3 %>%
filter(review_version %in% analysed_versions) %>%
select(-review_version) %>%
filter(!(lead_author %in% exclude_from_analysis))
table_4 <- table_4 %>%
filter(review_version %in% analysed_versions) %>%
select(-review_version) %>%
filter(!(lead_author %in% exclude_from_analysis))
table_5 <- table_5 %>%
filter(review_version %in% analysed_versions) %>%
select(-review_version) %>%
filter(!(lead_author %in% exclude_from_analysis))
a <- data_study_general %>%
select(lead_author, date_published, source, study_id) %>%
rename('Lead Author' = lead_author,
'Date Published' = date_published,
'Publication Source' = source,
'Study ID' = study_id)
a$`Lead Author` <- to_upper_camel_case(a$`Lead Author`, sep_out = ", ")
a$`Publication Source` <- to_title_case(a$`Publication Source`)
a$`Publication Source` <- if_else(str_length(a$`Publication Source`) < 5,
toupper(a$`Publication Source`),
to_title_case(a$`Publication Source`))
datatable(a)
a <- flextable(a)%>%
set_table_properties(width = 1, layout = 'autofit') %>%
set_caption(caption = 'Studies included in the current analysis')
save_as_docx(a, path = here('data_clean', 'included_studies.docx'))
#Number screened to add to PRISMA
from_prev_version <- data_study_general %>%
filter(review_version %in% prev_versions) %>%
filter(!(lead_author %in% exclude_from_analysis)) %>%
tally()
source(here::here('scripts', 'prisma_function.R'))
PRISMA_v5 <- PRISMA(search_details)
PRISMA_v5 <- as.data.frame(PRISMA_v5)
a <- PRISMA_v5 %>%
t() %>%
as.data.frame() %>%
add_rownames() %>%
flextable() %>%
set_header_labels(rowname = 'PRISMA category',
V1 = 'Number of studies') %>%
set_table_properties(width = 1, layout = 'autofit') %>%
set_caption(caption = 'Data for PRISMA')
save_as_docx(a, path = here('data_clean', 'PRISMA_details.docx'))
a
library('ggmap')
#Countries
country <- table_1$country %>%
to_upper_camel_case() %>%
recode(., 'Usa' = 'USA', 'Uk' = 'UK', 'SaudiArabia' = 'Saudi Arabia', "SouthKorea" = "South Korea") %>%
table() %>%
as.data.frame() %>%
arrange(desc(Freq)) %>%
rename('Country' = 1,
'Number' = 2) %>%
mutate(Country = as.character(Country))
ggplot(country, aes(x = reorder(Country, desc(-Number)), y = Number))+
geom_col()+
coord_flip()+
theme_bw()+
labs(title = 'Countries where studies were performed',
y = 'Number of studies',
x = 'Country')
a <- flextable(country) %>%
set_table_properties(width = 0.5, layout = 'autofit')
a
country <- subset(country, Country != "Multiple")
country <- mutate_geocode(country, Country)
country_bounds <- country %>%
select(lon, lat) %>%
drop_na %>%
sp::SpatialPointsDataFrame(coords = .[,1:2], data = .) %>%
sp::bbox() * 1.1
map_world <- map_data(map = "world") %>%
filter(region != "Antarctica")
save_as_docx(a, path = here('data_clean', 'Countries_performing_studies.docx'))
library(rgdal)
library(leaflet)
library(coronavirus)
update_dataset()
my_spdf <- readOGR(
dsn= paste0(here::here("data_clean", "world_shape_file")),
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
from_countries <- c("USA", "UK", "Iran", "South Korea")
to_countries <- c("United States", "United Kingdom", "Iran (Islamic Republic of)", "Korea, Republic of")
country_map <- country %>%
mutate(Country = plyr::mapvalues(Country, from = from_countries,
to = to_countries))
from_countries <- c("US", "Iran", "Korea, South")
to_countries <- c("United States", "Iran (Islamic Republic of)", "Korea, Republic of")
data("coronavirus")
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases) %>%
rename("NAME" = country) %>%
mutate(NAME = plyr::mapvalues(NAME, from = from_countries,
to = to_countries))
my_spdf@data <- left_join(my_spdf@data, country_map %>%
rename(NAME = Country),
by = "NAME") %>%
left_join(., summary_df %>%
mutate(total_cases = total_cases/1000),
by = "NAME") %>%
mutate(NAME = as.factor(NAME))
my_spdf@data$Number[ which(my_spdf@data$Number == 0)] = NA
my_spdf@data$total_cases[ which(is.na(my_spdf@data$total_cases))] = 0
my_bins <- c(0, 1, 5, 10, 20, 30, 40, 50)
mypalette <- colorBin(palette="YlOrBr", domain=my_spdf@data$Number, na.color="transparent", bins=my_bins)
mytext <- paste(
"Country: ", my_spdf@data$NAME,"<br/>",
"Number of studies included: ", my_spdf@data$Number, "<br/>",
"Number of COVID-19 reported cases (thousands): ", round(my_spdf@data$total_cases, 2),
sep="") %>%
lapply(htmltools::HTML)
html_map <- leaflet(my_spdf) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(Number),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.3,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend( pal=mypalette, values=~Number, opacity=0.9, title = "Number of studies included", position = "bottomright" )
html_map
#Setting
setting <- to_upper_camel_case(data_study_general$study_setting, sep_out = ' ') %>%
table(.) %>%
sort('Number of studies', decreasing = T) %>%
as.data.frame() %>%
arrange(desc(Freq)) %>%
rename('Setting' = 1,
'Number' = 2)
a <- flextable(setting) %>%
set_table_properties(width = 0.5, layout = 'autofit')
a
save_as_docx(a, path = here('data_clean', 'Countries_performing_studies.docx'))
#Numbers
a <- summary(table_1$sample_size)
a
#Source of data
table_1$data_source %>%
recode('electronic_health_records' = 'Electronic health record',
'case_report_form' = 'Case report form',
'not_stated' = 'Not stated') %>%
table() %>%
as.data.frame() %>%
arrange(desc(Freq)) %>%
rename('Data source' = 1,
'Number' = 2) %>%
flextable() %>%
set_table_properties(width = 0.5, layout = 'autofit')
#Studies reporting smokers
current_smok <- table_1 %>%
filter(., current_smoker != 'NA')
#Studies reporting former smokers
former_smok <- table_1 %>%
filter(., former_smoker != 'NA')
#Studies reporting never smokers
never_smok <- table_1 %>%
filter(., never_smoker != 'NA')
#Studies reporting current/former smokers
current_former_smok <- table_1 %>%
filter(., current_former_smoker != 'NA')
#Studies reporting missing data
missing_smok <- table_1 %>%
filter(., missing != 'NA') %>%
mutate(percent = missing/total*100)
minimum <- min(missing_smok$percent)
maximum <- max(missing_smok$percent)
#Studies reporting never/unknown
never_smok_unknown <- table_1 %>%
filter(., never_smoker_unknown != 'NA')
#Studies with not stated
smok_not_stated <- table_1 %>%
filter(., not_stated != 'NA')
#Studies reporting current, former and never smoking status
full_smoking_status <- table_1 %>%
filter(lead_author %in% current_smok$lead_author) %>%
filter(lead_author %in% former_smok$lead_author) %>%
filter(lead_author %in% never_smok$lead_author)
b <- full_smoking_status %>%
select(lead_author, sample_size, current_smoker, former_smoker, never_smoker, study_id) %>%
rename('Lead author' = lead_author,
'Sample size' = sample_size,
'Current smokers' = current_smoker,
'Former smokers' = former_smoker,
'Never smokers' = never_smoker,
'Study ID' = study_id)
b$`Lead author` <- to_upper_camel_case(b$`Lead author`, sep_out = ", ")
datatable(b,
caption = "Studies providing data on current, former and never smokers") %>%
formatRound(columns = c(2:5), digits = 0, interval = 3, mark = ",")
#These are the studies with data on current, former and never smokers
#Studies reporting current or current/former and never smoking
semi_full_smoking_status <- table_1 %>%
filter(lead_author %in% current_former_smok$lead_author) %>%
filter(lead_author %in% never_smok$lead_author) %>%
filter(!lead_author %in% full_smoking_status$lead_author)
b <- semi_full_smoking_status %>%
select(lead_author, sample_size, current_former_smoker, never_smoker, study_id) %>%
rename('Lead author' = lead_author,
'Sample size' = sample_size,
'Current/former smokers' = current_former_smoker,
'Never smokers' = never_smoker,
'Study ID' = study_id)
b$`Lead author` <- to_upper_camel_case(b$`Lead author`, sep_out = ", ")
datatable(b,
caption = "Studies providing partially complete data on smoking status") %>%
formatRound(columns = c(2:4), digits = 0, interval = 3, mark = ",")
#Remaining studies
incomplete_smoking_status <- table_1 %>%
filter(!lead_author %in% full_smoking_status$lead_author) %>%
filter(!lead_author %in% semi_full_smoking_status$lead_author)
b <- incomplete_smoking_status %>%
select(lead_author, sample_size, current_smoker, current_former_smoker, former_smoker, never_smoker, never_smoker_unknown, not_stated, missing, study_id) %>%
rename('Lead author' = lead_author,
'Sample size' = sample_size,
'Current smokers' = current_smoker,
'Current/former smokers' = current_former_smoker,
'Former smoker' = former_smoker,
'Never smokers' = never_smoker,
'Never smoker/unknown' = never_smoker_unknown,
'Not stated' = not_stated,
'Missing' = missing,
'Study ID' = study_id)
b$`Lead author` <- to_upper_camel_case(b$`Lead author`, sep_out = ", ")
datatable(b,
caption = "Studies providing incomplete data on smoking status") %>%
formatRound(columns = c(2:8), digits = 0, interval = 3, mark = ",")
#Smoking prevalence by country
country_prevalence_list <- table_1 %>%
group_by(country, add = T) %>%
mutate(., current_smok_percentage = current_smoker/total*100) %>%
mutate(., former_smok_percentage = former_smoker/total*100) %>%
mutate(., missing_percentage = missing/total*100) %>%
mutate(., not_stated_percentage = not_stated/total*100) %>%
mutate(never_smoker_percentage = never_smoker/total*100) %>%
group_split()
#Updating table 1
table_1_word <- table_1 %>%
mutate(., current_percentage = current_smoker/total*100,
former_percentage = former_smoker/total*100,
current_former_percentage = current_former_smoker/total*100,
never_smoker_percentage = never_smoker/total*100,
never_smoker_unknown_percentage = never_smoker_unknown/total*100,
not_stated_percentage = not_stated/total*100,
missing_percentage = missing/total*100) %>%
select(lead_author, date_published, country, sample_size, median_age, iqr_lower, iqr_upper, mean_age, lower_range,
upper_range, standard_deviation, female_sex_percent, current_percentage, former_percentage, current_former_percentage,
never_smoker_percentage, never_smoker_unknown_percentage, not_stated_percentage, missing_percentage, study_id) %>%
replace_na(., list(not_stated_percentage = 0, missing_percentage = 0)) %>%
mutate(., missing_percentage = not_stated_percentage + missing_percentage,
missing_percentage = formatC(missing_percentage, digits = 2, format = "f"))
#Smoking completeness
smoking_status <- as_tibble(full_smoking_status$lead_author) %>%
rename(lead_author = 1) %>%
mutate(complete_status = c("Yes")) %>%
bind_rows(., semi_full_smoking_status %>%
select(lead_author)) %>%
bind_rows(., incomplete_smoking_status %>%
select(lead_author)) %>%
distinct() %>%
mutate(complete_status = replace_na(complete_status, "No"))
#Data missingness
missingness <- table_6 %>%
select(lead_author) %>%
left_join(., table_1_word %>%
select(lead_author, missing_percentage)) %>%
mutate(missing_percentage = as.numeric(missing_percentage),
low_missingness = ifelse(missing_percentage >= 20, "No", "Yes"))
#Defining poor quality
poor_quality <- missingness %>%
select(-missing_percentage) %>%
left_join(., smoking_status, by = "lead_author") %>%
mutate(study_quality = ifelse(low_missingness == "No" | complete_status == "No", "Poor", "Not_poor"))
good_quality <- table_6 %>%
left_join(., poor_quality, by = "lead_author") %>%
select(lead_author, study_quality, biochemical_verification, random_representative_sample) %>%
mutate(study_quality_final = ifelse(study_quality == "Not_poor" & (biochemical_verification == "Yes" | random_representative_sample == "Yes"), "good",
ifelse(study_quality == "Poor", "poor", "fair")))
quality_rating <- good_quality %>%
select(lead_author, study_quality_final) %>%
rename("overall_quality" = study_quality_final)
table_1_word <- left_join(table_1_word, good_quality %>%
select(lead_author, study_quality_final))
a <- data_study_general %>%
select(study_id, study_setting)
table_1_word <- left_join(table_1_word, a, by = 'study_id') %>%
select(1:4, 22, 5:19, 21, 20)
table_1_word$date_published <- as.Date.character(table_1_word$date_published)
write_rds(table_1_word, here::here('data_clean', 'table_1_word.rds'))
table_1_word <- table_1_word %>%
mutate(median_mean = ifelse(is.na(median_age), mean_age, median_age))
a <- table_1_word %>%
mutate(median_mean = ifelse(is.na(median_age), mean_age, median_age),
mean_used = ifelse(is.na(mean_age), '','^'),
iqr = ifelse(is.na(iqr_lower), NA, paste(iqr_lower, iqr_upper, sep = '-')),
range_combined = paste(lower_range, upper_range, sep = '-'),
range_combined = na_if(range_combined, 'NA-NA'),
standard_deviation = as.numeric(standard_deviation),
st_dev = paste((as.integer(median_mean-standard_deviation)), as.integer((median_mean+standard_deviation)), sep = '-'),
st_dev = na_if(st_dev, 'NA-NA'))
a$iqr <- coalesce(a$iqr, a$range_combined, a$st_dev)
a$iqr_used <- coalesce(a$range_used, a$st_dev_used)
a <- a %>%
select(study_id, lead_author, date_published, country, sample_size, study_setting, median_mean, mean_used, iqr,
female_sex_percent, current_percentage, current_former_percentage, never_smoker_percentage,
never_smoker_unknown_percentage, missing_percentage, study_quality_final) %>%
mutate(median_mean = paste(median_mean, mean_used, sep = ''),
median_mean = na_if(median_mean, NA)) %>%
select(-mean_used) %>%
mutate(median_mean = ifelse(median_mean == 'NA', 'NA', paste(paste(median_mean, iqr, sep = ' ('),')', sep = ''))) %>%
select(-iqr) %>%
rename('Study ID' = study_id,
'Lead author' = lead_author,
'Date published' = date_published,
'Country' = country,
'Sample size' = sample_size,
'Study setting' = study_setting,
'Median (IQR)' = median_mean,
'Female %' = female_sex_percent,
'Current smoker %' = current_percentage,
'Current/former smokers %' = current_former_percentage,
'Never smokers %' = never_smoker_percentage,
'Never/unknown smokers %' = never_smoker_unknown_percentage,
'Missing %' = missing_percentage,
"Study quality" = study_quality_final)
a$`Lead author` <- to_upper_camel_case(a$`Lead author`, sep_out = ", ")
cleaned_names <- c('Chow, Us, Cdc',
"Gold, Us, Cdc",
"Miyara, Updated",
"De, La, Rica",
"Opensafely, Collaborative",
"Bello, Chavolla",
"Carrillo, Vega",
"De, Lusignan",
"Mejia, Vilet",
"Heili, Frades",
"Vaquero, Roncero",
"Al, Hindawi",
"Del, Valle",
"Soto, Mota",
"Eugen, Olsen",
"Martinez, Portilla",
"Raisi, Estabragh",
"Miyara, Medrxiv",
"Hernandez, Gardano",
"Siso, Almirall",
"Martinez, Jiminez",
"eugen_olsen",
"Mcqueenie")
correct_names <- c('Chow (US CDC)',
"Gold (US CDC)",
"Miyara",
"de la Rica",
"The Opensafely Collaborative",
"Bello-Chavolla",
"Carillo-Vega",
"de Lusignan",
"Mejia-Vilet",
"Heili-Frades",
"Vaquero-Roncero",
"Al-Hindawi",
"del Valle",
"Soto-Mota",
"Eugen-Olsen",
"Martinez-Portilla",
"Raisi-Estabragh",
"Miyara",
"Hernandez-Gardano",
"Siso-Almirall",
"Martinez-Jiminez",
"Eugen-Olsen",
"McQueenie")
author_list <- plyr::mapvalues(a$`Lead author`,
from = cleaned_names,
to = correct_names)
a$`Lead author` <- author_list
a$`Study setting` <-to_title_case(a$`Study setting`, sep_out = " ")
a$`Country` <-to_title_case(a$`Country`, sep_out = " ")
a$`Country` <- a$Country %>%
recode('Usa' = 'USA',
'Uk' = 'UK')
numeric_columns <- c('Median (IQR)', 'Female %', 'Current smoker %', 'Current/former smokers %',
'Never smokers %', 'Never/unknown smokers %', 'Missing %')
datatable(a) %>%
formatRound(
columns = c(8:14),
digits = 2,
interval = 3,
mark = ",",
dec.mark = getOption("OutDec")
)
a <- flextable(a) %>%
set_caption(caption = 'Characteristics of included studies') %>%
colformat_num(col_keys = numeric_columns, digits = 1, na_str = '-', big.mark = ',') %>%
colformat_num(col_keys = 'Sample size', digits = 0, na_str = '-', big.mark = ',') %>%
set_table_properties(width = 1, layout = 'autofit')
save_as_docx(a, path = here('data_clean', 'Table_1.docx'))
